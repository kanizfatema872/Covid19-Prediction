# -*- coding: utf-8 -*-
"""Covid19_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LSIfbTG-94W-o8EFOFNDKHHEVNXtt8xO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
import tensorflow as tf
import keras
import seaborn as sns

dataset = pd.read_csv('/content/drive/MyDrive/Machine Learning A-Z/covid_19_data.csv')

dataset

dataset.columns
dataset.shape

dataset.columns

dataset.isna().sum()

dataset["ObservationDate"] = pd.to_datetime(dataset["ObservationDate"])

dataset["ObservationDate"]

dataset["Last Update"] = pd.to_datetime(dataset["Last Update"])

dataset["Last Update"]

dataset["ObservationDate_day"] = dataset["ObservationDate"].dt.day
dataset["ObservationDate_month"] = dataset["ObservationDate"].dt.month
dataset["ObservationDate_year"] = dataset["ObservationDate"].dt.year

dataset.head()

dataset['Last Update_day'] = dataset['Last Update'].dt.day
dataset['Last Update_month'] = dataset['Last Update'].dt.month
dataset['Last Update_year'] = dataset['Last Update'].dt.year

dataset.head()

dataset.shape

dataset['ObservationDate'] = dataset['ObservationDate'].astype(np.int64)
dataset['Last Update'] = dataset['Last Update'].astype(np.int64)

dataset.dtypes

from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing

labelencoder = LabelEncoder()
dataset['Country'] = labelencoder.fit_transform(dataset['Country'])

from sklearn.preprocessing import OneHotEncoder
dataset['Country'] = preprocessing.OneHotEncoder().fit_transform(dataset.Country.values.reshape(-1,1)).toarray()

dataset['Country']

dataset.columns

from sklearn.model_selection import train_test_split
X = dataset.iloc[:,:-1].values
y = dataset.iloc[:,12].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

"""**LinearRegression**"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train,y_train)

accuracy = lr.score(X_test,y_test)

accuracy

"""**SVM algorithm**"""

from sklearn.svm import SVC
model = SVC()

model.fit(X_train,y_train)

accuracy = model.score(X_test,y_test)

accuracy

from sklearn.metrics import classification_report

predictions = model.predict(X_test)

print(classification_report(y_test,predictions))

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier(n_estimators=20, random_state=0)

clf.fit(X_train,y_train)

from sklearn.metrics import accuracy_score, classification_report

predictions = clf.predict(X_test)

print(accuracy_score(y_test,predictions))
print(classification_report(y_test,predictions))

"""**Logistic Regression**"""

from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression()

logreg.fit(X_train,y_train)

predictions = logreg.predict(X_test)
print(accuracy_score(y_test,predictions))
print(classification_report(y_test, predictions))

"""**Naibe Bayes**"""

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()

nb.fit(X_train, y_train)

predictions = nb.predict(X_test)
print(accuracy_score(y_test,predictions))
print(classification_report(y_test,predictions))

"""**KNN algorithm**"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()

knn.fit(X_train,y_train)

predictions = knn.predict(X_test)
print(accuracy_score(y_test,predictions))
print(classification_report(y_test,predictions))

"""**XGBoost**"""

from xgboost import XGBClassifier

model = XGBClassifier()

model.fit(X_train,y_train)

predictions = model.predict(X_test)
print(accuracy_score(y_test,predictions))
print(classification_report(y_test,predictions))